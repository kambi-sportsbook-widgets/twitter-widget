@ngdoc overview
@name Step 8
@description


# Step 8

When we click on the outcomes they should of course be added to the betslip, the {@link /tool/js/index.html#/api/widgetCore.controller:widgetCoreController widgetCoreController } will help us with this as well.
The widget api has methods to add or remove outcomes from the bet slip, so we have to figure out which one to call

Create a method that takes the outcome, checks if it's selected already and then add or remove it

__`appController.js`__

```js
$scope.toggleOutcome = function ( outcome ) {
  if ( outcome.selected !== true ) {
     $scope.addOutcomeToBetslip(outcome);
  } else {
     $scope.removeOutcomeFromBetslip(outcome);
  }
};
```

Then we hook it up to the outcomes in the html

__`index.html`__
```html
ng-click="toggleOutcome(outcome)"
```

When an outcome is added to the betslip the widgetCore will receive this information and
broadcast an event on the rootScope with all of the outcomes on the betslip.
We need to listen to this event and update any of the events that we have accordingly.

Let's first create a method for updating our events.
We need to go through our events and then we can call `updateBetOfferOutcomes` that we get from extending the {@link /tool/js/index.html#/api/widgetCore.controller:widgetCoreController widgetCoreController }.


__`appController.js`:__

```js
$scope.updateOutcomes = function ( outcomes ) {
 var i = 0, eventLen = $scope.liveEvents.length;
 for ( ; i < eventLen; ++i ) {
    if ( $scope.liveEvents[i].mainBetOffer != null && $scope.liveEvents[i].mainBetOffer.outcomes != null ) {
       $scope.updateBetOfferOutcomes($scope.liveEvents[i].mainBetOffer, outcomes);
    }
 }
 $scope.$apply();
};
```

and then we add a listener for the ``OUTCOMES:UPDATE`` event that the {@link /tool/js/index.html#/api/widgetCore.kambiWidgetService kambiWidgetService } broadcasts

__`appController.js`__

```js
$scope.$on('OUTCOMES:UPDATE', function ( event, data ) {
  $scope.updateOutcomes(data.outcomes);
});
```

Finally we need to indicate the selection change in the html, so let's add the selected class if that property is set on the outcome

__`index.html`__

```html
ng-class="{selected: outcome.selected===true}"
```

There is a scenario that we have not accounted for and that is if the betslip has outcomes in it when the data is fetched.
Since we currently only indicate betslip changes that occour after we've loaded the data we need to update our outcomes after loading the events.
To solve this we need to request the betslip information, this will in turn cause the ``OUTCOMES:UPDATE`` event to be broadcast and our code will handle the rest.
The widgetCoreController has a method for this, `requestBetslipOutcomes`.

__`appController.js`__

```js
$scope.requestBetslipOutcomes();
```
