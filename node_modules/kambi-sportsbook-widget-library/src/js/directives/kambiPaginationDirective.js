/**
 * A pagination directive used for client-side pagination
 */
(function () {

   'use strict';

   /**
    * @ngdoc directive
    * @name widgetCore.directive:kambiPaginationDirective
    * @description
    * A pagination directive used for client-side pagination
    * @restrict E
    * @scope    *
    * @author teo@globalmouth.com
    */
   (function ( $app ) {
      return $app.directive('kambiPaginationDirective', [function () {

         return {
            restrict: 'E',
            scope: {
               'list': '=list',
               'listLimit': '=',
               'pages': '=',
               'startFrom': '=',
               'activePage': '='
            },
            template: '<span ng-class="{disabled:activePage === 1}" ng-if="pages.length > 1" ng-click="pagePrev()" class="kw-page-link kw-pagination-arrow">' +
            '<i class="ion-ios-arrow-left"></i></span>' +
            '<span ng-if="pages.length > 1" ng-repeat="page in getPagination()" ng-click="setActivePage(page)" ng-class="{active:page === activePage}" ' +
            'class="kw-page-link l-pack-center l-align-center">{{page}}</span>' +
            '<span ng-class="{disabled:activePage === pages.length}" ng-if="pages.length > 1" ng-click="pageNext()" class="kw-page-link kw-pagination-arrow">' +
            '<i class="ion-ios-arrow-right"></i></span>',
            controller: ['$scope', function ( $scope ) {

               /**
                * @name widgetCore.directive:kambiPaginationDirective#activePage
                * @methodOf widgetCore.directive:kambiPaginationDirective
                * @description
                * Default active page
                * @type {number} Default active page
                */
               $scope.activePage = 1;

               /**
                * @ngdoc method
                * @name widgetCore.directive:kambiPaginationDirective#setPage
                * @methodOf widgetCore.directive:kambiPaginationDirective
                * @description
                * Sets the page
                * @param {Object} page Page object
                * @param {Integer} page.startFrom Display page starting with this index
                * @param {Object} page.page Page object
                */
               $scope.setPage = function ( page ) {
                  $scope.startFrom = page.startFrom;
                  $scope.activePage = page.page;
               };

               /**
                * @ngdoc method
                * @name widgetCore.directive:kambiPaginationDirective#setActivePage
                * @methodOf widgetCore.directive:kambiPaginationDirective
                * @description
                * Sets the current page. Takes in an integer, the index in array
                * @param {Integer} page Page index
                */
               $scope.setActivePage = function ( page ) {
                  $scope.setPage($scope.pages[page - 1]);
               };

               /**
                * @ngdoc method
                * @name widgetCore.directive:kambiPaginationDirective#pagePrev
                * @methodOf widgetCore.directive:kambiPaginationDirective
                * @description
                * Sets the page to the previous one, if it's not already at the first page
                */
               $scope.pagePrev = function () {
                  if ( $scope.activePage > 1 ) {
                     $scope.setPage($scope.pages[$scope.activePage - 2]);
                  }
               };

               /**
                * @ngdoc method
                * @name widgetCore.directive:kambiPaginationDirective#pageNext
                * @methodOf widgetCore.directive:kambiPaginationDirective
                * @description
                * Sets the page to the next one, if it's not already at the last page
                */
               $scope.pageNext = function () {
                  if ( $scope.activePage < $scope.pages.length ) {
                     $scope.setPage($scope.pages[$scope.activePage]);
                  }
               };

               /**
                * @ngdoc method
                * @name widgetCore.directive:kambiPaginationDirective#pageCount
                * @methodOf widgetCore.directive:kambiPaginationDirective
                * @description
                * Get the pagination amount of items based on liveevent and list limit
                * @returns {Number} Returns the page count
                */
               $scope.pageCount = function () {
                  return Math.ceil($scope.list.length / $scope.listLimit);
               };

               /**
                * @ngdoc method
                * @name widgetCore.directive:kambiPaginationDirective#getPagination
                * @methodOf widgetCore.directive:kambiPaginationDirective
                * @description
                * Get the pagination items.
                * @returns {Array} An array with the pagination items, used in ng-repeat
                */
               $scope.getPagination = function () {
                  var paginationItems = [],
                     paginationLimit = 5,
                     activePage = $scope.activePage,
                     pageCount = $scope.pageCount();

                  var startPage = 1, endPage = pageCount;

                  if ( paginationLimit < pageCount ) {
                     // Keep active page in middle by adjusting start and end
                     startPage = Math.max(activePage - Math.floor(paginationLimit / 2), 1);
                     endPage = startPage + paginationLimit - 1;

                     // Shift the list start and end
                     if ( endPage > pageCount ) {
                        endPage = pageCount;
                        startPage = endPage - paginationLimit + 1;
                     }
                  }

                  // Add page number links
                  for ( var i = startPage; i <= endPage; i++ ) {
                     paginationItems.push(i);
                  }

                  return paginationItems;
               };
            }]
         };
      }]);
   })(angular.module('widgetCore'));

})();
