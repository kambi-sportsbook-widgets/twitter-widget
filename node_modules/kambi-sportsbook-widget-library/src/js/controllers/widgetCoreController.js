/**
 * This controller takes care of the common widget implementations and should be extended by the widgets own controller(s)
 * @author Michael Blom <michael@globalmouth.com>
 */
(function () {

   'use strict';

   /**
    * @ngdoc controller
    * @name widgetCore.controller:widgetCoreController
    * @requires ng.$scope
    * @requires widgetCore.kambiWidgetService
    * @description
    * This controller takes care of the common widget implementations and should be extended by the widgets own controller(s)
    * @author <michael@globalmouth.com>
    */
   function widgetCoreController( $scope, $widgetService, $apiService, $q ) {

      /**
       * @ngdoc property
       * @name widgetCore.controller:apiConfigSet
       * @propertyOf widgetCore.controller:widgetCoreController
       * @description Flag to indicate that the config parameters are set for the json API service
       * @returns {Boolean} Default false
       * @type {Object}
       */
      $scope.apiConfigSet = false;

      /**
       * @ngdoc property
       * @name widgetCore.controller:appArgsSet
       * @propertyOf widgetCore.controller:widgetCoreController
       * @description Flag to indicate that the widget arguments have been received and set
       * @returns {Boolean} Default false
       */
      $scope.appArgsSet = false;

      /**
       * @ngdoc property
       * @name widgetCore.controller:oddsFormat
       * @propertyOf widgetCore.controller:widgetCoreController
       * @description The odds format,
       * @returns {String} Default 'decimal'
       */
         //todo: Use the odds format setting
      $scope.oddsFormat = 'decimal';

      /**
       * @ngdoc property
       * @name widgetCore.controller:defaultHeight
       * @propertyOf widgetCore.controller:widgetCoreController
       * @description Default Widget height, used when resetting the list
       * @returns {Number} Default 350
       */
      $scope.defaultHeight = 350;

      /**
       * @ngdoc property
       * @name widgetCore.controller:currentHeight
       * @propertyOf widgetCore.controller:widgetCoreController
       * @description The actual list of the widget
       * @returns {Number} Default 350
       */
      $scope.currentHeight = 350;

      /**
       * @ngdoc property
       * @name widgetCore.controller:apiVersion
       * @propertyOf widgetCore.controller:widgetCoreController
       * @description What version of the JSON api to use
       * @returns {String} Default 'v2'
       */
      $scope.apiVersion = 'v2';

      /**
       * @ngdoc property
       * @name widgetCore.controller:streamingAllowedForPlayer
       * @propertyOf widgetCore.controller:widgetCoreController
       * @description Flag for allowing streaming
       * @returns {Boolean} Default false
       * @type {Object}
       */
      $scope.streamingAllowedForPlayer = false;

      /**
       * @ngdoc property
       * @name widgetCore.controller:defaultArgs
       * @propertyOf widgetCore.controller:widgetCoreController
       * @returns {Object} Object
       * @type {Object}
       */
      $scope.defaultArgs = {};

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#init
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Sets up the basic configurations and makes the initial requests to the widget API to setup the json and widget api
       * This should be called from the extending controller after the appropriate values are set so that we use those values
       *
       * @returns {Promise} A promise that resolve after the config and args have been set
       */
      $scope.init = function () {
         var initDeferred = $q.defer();

         // Setup a self-removing listener for the CLIENT:CONFIG event
         var clientConfigListener = $scope.$on('CLIENT:CONFIG', function ( event, data ) {
            if ( data.oddsFormat != null ) {
               $scope.setOddsFormat(data.oddsFormat);
            }
            data.version = $scope.apiVersion;

            // Set the configuration in the api Service and then set the flag to indicate that we have done so
            $apiService.setConfig(data);

            $scope.apiConfigSet = true;
            // Check if both page info and widget args have been received, if so resolve the init promise
            if ( $scope.apiConfigSet && $scope.appArgsSet ) {
               initDeferred.resolve();
            }
            // Remove this listener
            clientConfigListener();
         });

         // Self-removing listener for the WIDGET:ARGS event
         var removeWidgetArgsListener = $scope.$on('WIDGET:ARGS', function ( event, data ) {
            // Set the arguments for the app and then set the flag to indicate that this is done
            $scope.setArgs(data);
            // Set the offering in the API service
            if (data != null && data.hasOwnProperty('offering') ) {
               $apiService.setOffering(data.offering);
            } else {
               console.warn('No offering has been set, API requests will not work');
            }

            $scope.appArgsSet = true;
            // Check if both page info and widget args have been received, if so resolve the init promise
            if ( $scope.apiConfigSet && $scope.appArgsSet ) {
               initDeferred.resolve();
            }
            // Remove this listener
            removeWidgetArgsListener();
         });

         // Set the height of the widget and request the height so we can be sure that we have the correct value from the Sportsbook
         $widgetService.setWidgetHeight($scope.defaultHeight);
         $widgetService.requestWidgetHeight();
         // Enable transitions to make height changes purdy
         $widgetService.enableWidgetTransition(true);

         // Request the client configuration
         $widgetService.requestClientConfig();

         // Request the widget arguments
         $widgetService.requestWidgetArgs();

         // Request the outcomes from the betslip so we can update our widget, this will also sets up a subscription for future betslip updates
         $widgetService.requestBetslipOutcomes();
         // Request the odds format that is set in the sportsbook, this also sets up a subscription for future odds format changes
         $widgetService.requestOddsFormat();

         return initDeferred.promise;
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#navigateToLiveEvent
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Navigate to a live event
       * @param {number} eventId Event id
       */
      $scope.navigateToLiveEvent = function ( eventId ) {
         $widgetService.navigateToLiveEvent(eventId);
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#getWidgetHeight
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Request widget height
       */
      $scope.getWidgetHeight = function () {
         $widgetService.requestWidgetHeight();
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#setWidgetHeight
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Set the height of the widget
       * @param {number} height Height in pixels
       */
      $scope.setWidgetHeight = function ( height ) {
         $scope.currentHeight = height;
         $widgetService.setWidgetHeight(height);
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#setWidgetEnableTransition
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Enable or disable CSS3 Transitions
       * @param {boolean} enable Enable transition
       */
      $scope.setWidgetEnableTransition = function ( enable ) {
         $widgetService.enableWidgetTransition(enable);
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#removeWidget
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Remove the widget
       */
      $scope.removeWidget = function () {
         $widgetService.removeWidget();
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#addOutcomeToBetslip
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Add an outcome to the betslip
       * @param {Object} outcome The outcome object
       */
      $scope.addOutcomeToBetslip = function ( outcome ) {
         $widgetService.addOutcomeToBetslip(outcome.id);
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#removeOutcomeFromBetslip
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Remove an outcome from the betslip
       * @param {Object} outcome The outcome object
       */
      $scope.removeOutcomeFromBetslip = function ( outcome ) {
         $widgetService.removeOutcomeFromBetslip(outcome.id);
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#requestBetslipOutcomes
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Request the outcomes in the betslip
       */
      $scope.requestBetslipOutcomes = function () {
         $widgetService.requestBetslipOutcomes();
      };


      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#requestWidgetArgs
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Request the widget arguments from the API
       */
      $scope.requestWidgetArgs = function () {
         $widgetService.requestWidgetArgs();
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#requestPageInfo
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Request page info from the API
       */
      $scope.requestPageInfo = function () {
         $widgetService.requestPageInfo();
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#requestOddsFormat
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Request the odds format set on the SportsBook
       */
      $scope.requestOddsFormat = function () {
         $widgetService.requestOddsFormat();
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#setOddsFormat
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Set the odds format of the widget
       * @param {String} oddsFormat - Odds format (decimal, american or fractional)
       */
      $scope.setOddsFormat = function ( oddsFormat ) {
         $scope.oddsFormat = oddsFormat;
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#findEvent
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Iterates over the events and finds the one with the matching id
       * @param {Array.<Object>} events An array of events
       * @param {number} eventId the event id to search for
       * @returns {Object|null} Returns the event if found, otherwise null
       */
      $scope.findEvent = function ( events, eventId ) {
         var i = 0, len = events.length;
         for ( ; i < len; ++i ) {
            if ( events[i].id === eventId ) {
               return events[i];
            }
         }
         return null;
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#getOutcomeLabel
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Parses the label based on it's type and the passed event
       * @param {Object} outcome Outcome object
       * @param {Object} event Event object
       */
      $scope.getOutcomeLabel = function ( outcome, event ) {
         return $apiService.getOutcomeLabel(outcome, event);
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#setArgs
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Sets the base configuration for the app based on what we get from the WIDGET:ARGS event
       * @param {Object} newArgs Arguments
       */
      $scope.setArgs = function ( newArgs ) {
         var args = $scope.defaultArgs;
         // Iterate over the default arguments, if the property exists in both the data and default arguments, set the value
         for ( var i in newArgs ) {
            if ( newArgs.hasOwnProperty(i) && args.hasOwnProperty(i) ) {
               args[i] = newArgs[i];
            }
         }
         $scope.args = args;
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#setPages
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Sets the pages based on the length of the provided list
       * @param {Array} list  An array of items that are to be paginated
       * @param {number} listLimit  How many items are shown in a page
       * @param {number} [listLength]  The total length of the list, if not passed list.length is used
       */
      $scope.setPages = function ( list, listLimit, listLength ) {
         var eventCount = listLength || list.length;
         var len = Math.ceil(eventCount / listLimit);
         var i = 0;
         $scope.pages = [];
         for ( ; i < len; ++i ) {
            // Set the page number and starting point for easier filtering in the view
            $scope.pages.push({
               startFrom: listLimit * i,
               page: i + 1
            });
         }
      };

      /**
       * @ngdoc method
       * @name widgetCore.controller:widgetCoreController#updateBetOfferOutcomes
       * @methodOf widgetCore.controller:widgetCoreController
       * @description
       * Updates the bet offer with new odds and flags the outcomes as selected if they are found
       * @param {Object} betOffer The betoffer to be updated
       * @param {Array.<Object>} outcomes The outcomes to update the bet offer data with
       */
      $scope.updateBetOfferOutcomes = function ( betOffer, outcomes ) {
         var i = 0, eventOutcomesLen = betOffer.outcomes.length, outcomesLen = outcomes.length;
         for ( ; i < eventOutcomesLen; ++i ) {
            var j = 0;
            var foundIndex = -1;
            betOffer.outcomes[i].selected = false;
            for ( ; j < outcomesLen; j++ ) {
               if ( betOffer.outcomes[i].id === outcomes[j].id ) {
                  betOffer.outcomes[i].odds = outcomes[j].odds;
                  foundIndex = i;
               }

               if ( foundIndex !== -1 ) {
                  betOffer.outcomes[foundIndex].selected = true;
               }
            }
         }
      };

      // Add a listener for the WIDGET:HEIGHT event and update the current height
      $scope.$on('WIDGET:HEIGHT', function ( event, height ) {
         $scope.currentHeight = height;
      });

   }

   (function ( $app ) {
      return $app.controller('widgetCoreController', ['$scope', 'kambiWidgetService', 'kambiAPIService', '$q', widgetCoreController]);
   })(angular.module('widgetCore', []));

})();
