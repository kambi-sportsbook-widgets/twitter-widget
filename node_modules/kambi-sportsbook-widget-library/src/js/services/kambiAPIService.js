(function () {

   'use strict';

   (function ( $app ) {

      /**
       * @ngdoc service
       * @name widgetCore.kambiAPIService
       * @requires ng.$http
       * @requires ng.$q
       * @description
       * Service that integrates the Kambi Sportsbook JSON API
       */
      return $app.service('kambiAPIService', ['$http', '$q', function ( $http, $q ) {
         var kambiAPIService = {};

         /**
          * Specify what configuration properties will be available to set
          * @type {{apiBaseUrl: null, channelId: null, currency: null, locale: null, market: null, offering: null, clientId: null, version: string}}
          */
         kambiAPIService.configDefer = $q.defer();
         kambiAPIService.configSet = false;
         kambiAPIService.offeringSet = false;

         kambiAPIService.config = {
            apiBaseUrl: null,
            channelId: null,
            currency: null,
            locale: null,
            market: null,
            offering: null,
            clientId: null,
            version: 'v2'
         };

         /**
          * @ngdoc overview
          * @name widgetCore.kambiAPIService#setConfig
          * @methodOf widgetCore.kambiAPIService
          * @description
          * Set the configuration of the API service, these settings are provided by the widget API
          * Only settings that correspond to the kambiAPIService.config properties will be set
          * @param {Object} config An object with configuration parameters
          */
         kambiAPIService.setConfig = function ( config ) {
            // Iterate over the passed object properties, if the exist in the predefined config object then we set them
            for ( var i in config ) {
               if ( config.hasOwnProperty(i) && kambiAPIService.config.hasOwnProperty(i) ) {
                  kambiAPIService.config[i] = config[i];
               }
            }
            // We need to replace the {apiVersion} part of the apiBaseUrl with the configured version
            kambiAPIService.config.apiBaseUrl = kambiAPIService.config.apiBaseUrl.replace(/\{apiVersion}/gi, kambiAPIService.config.version);
            kambiAPIService.configSet = true;
            if ( kambiAPIService.configSet && kambiAPIService.offeringSet ) {
               kambiAPIService.configDefer.resolve();
            }
         };

         /**
          * @ngdoc overview
          * @name widgetCore.kambiAPIService#setOffering
          * @methodOf widgetCore.kambiAPIService
          * @description
          * Set the offering in the configuration
          * We will normally get this from the Widget Args and not the Client config, so it gets its own method
          * @param {String} offering Offering string
          *
          */
         kambiAPIService.setOffering = function ( offering ) {
            kambiAPIService.config.offering = offering;
            kambiAPIService.offeringSet = true;
            if ( kambiAPIService.configSet && kambiAPIService.offeringSet ) {
               kambiAPIService.configDefer.resolve();
            }
         };

         /**
          * @ngdoc overview
          * @name widgetCore.kambiAPIService#getGroupEvents
          * @methodOf widgetCore.kambiAPIService
          * @description
          * Fetches the events for a specific group
          * @param {number} groupId The group Id
          * @returns {Promise} Returns a promise
          */
         kambiAPIService.getGroupEvents = function ( groupId ) {
            var requesPath = '/event/group/' + groupId + '.json';
            return kambiAPIService.doRequest(requesPath);
         };

         /**
          * @ngdoc overview
          * @name widgetCore.kambiAPIService#getLiveEvents
          * @methodOf widgetCore.kambiAPIService
          * @description
          * Fetches the live events, returns a promise
          * @returns {Promise} Promise
          */
         kambiAPIService.getLiveEvents = function () {
            var requestPath = '/event/live/open.json';
            return kambiAPIService.doRequest(requestPath);
         };

         /**
          * @ngdoc overview
          * @name widgetCore.kambiAPIService#getBetoffersByGroup
          * @methodOf widgetCore.kambiAPIService
          * @description
          * Fetches the prematch bet offers for a specific group or list of groups
          * @param {number|Array.<number>} groupId The group id or list of group ids to get offers from
          * @param {number} [type] The bet offer type identifier
          * @param {String} [market] The geographical market
          * @param {String} [start] Starting date/time, restricts the result to events close to this date. ISO-8601
          * @param {number} [interval] The interval in minutes to include results, counting from start. Unlimited if not set
          * @returns {Promise} Promise
          */
         kambiAPIService.getBetoffersByGroup = function ( groupId, type, market, start, interval ) {
            var requestPath = '/betoffer/main/group/' + groupId + '.json';
            return kambiAPIService.doRequest(requestPath, {
               'include': 'participants'
            });
         };

         /**
          * @ngdoc overview
          * @name widgetCore.kambiAPIService#getGroupById
          * @methodOf widgetCore.kambiAPIService
          * @description
          * Fetches the specified group based on the id and it's contained groups, limited by depth
          * @param {number} groupId The id of the group to fetch
          * @param {number} depth The limiting depth of the contained groups
          * @returns {Promise} Promise
          */
         kambiAPIService.getGroupById = function(groupId, depth) {
            var requestPath = '/group/'+groupId + '.json';
            return kambiAPIService.doRequest(requestPath, {
               depth: depth
            });
         };

         /**
          * @ngdoc overview
          * @name widgetCore.kambiAPIService#doRequest
          * @methodOf widgetCore.kambiAPIService
          * @description
          * Core method for calling the API, returns a promise
          * @param {string} requestPath The path to the request, following the offering id
          * @param {params} [params] parameters
          * @returns {Promise} Promise
          */
         kambiAPIService.doRequest = function ( requestPath, params ) {
            return kambiAPIService.configDefer.promise.then(function () {
               if ( kambiAPIService.config.offering == null ) {
                  return $q.reject('The offering has not been set, please provide it in the widget arguments');
               } else {
                  var requestUrl = kambiAPIService.config.apiBaseUrl + kambiAPIService.config.offering + requestPath;
                  var overrideParams = params || {};
                  var requestParams = {
                     lang: overrideParams.locale || kambiAPIService.config.locale,
                     market: overrideParams.market || kambiAPIService.config.market,
                     client_id: overrideParams.clientId || kambiAPIService.config.clientId,
                     include: overrideParams.include || null,
                     callback: 'JSON_CALLBACK'
                  };
                  return $http.jsonp(requestUrl, {
                     params: requestParams,
                     cache: false
                  });
               }
            });
         };

         /**
          * @ngdoc overview
          * @name widgetCore.kambiAPIService#getOutcomeLabel
          * @methodOf widgetCore.kambiAPIService
          * @description
          * Parses the label based on it's type and the passed event
          * @param {Object} outcome Outcome object
          * @param {Object} event Event object
          */
         kambiAPIService.getOutcomeLabel = function ( outcome, event ) {
            switch ( outcome.type ) {
               case 'OT_ONE': //Outcome has label 1. Applies to Threeway bet offers.
                  return event.homeName;
               case 'OT_CROSS': //Outcome has label X. Applies to Threeway bet offers.
                  // Todo: Translation
                  return 'Draw';
               case 'OT_TWO': //Outcome has label 2. Applies to Threeway bet offers.
                  return event.awayName;
               // Todo: Impelement these responses with translations

               //case 'OT_OVER': //The “Over” outcome in Over/Under bet offer.
               //break;
               //case 'OT_UNDER': //The “Under” outcome in Over/Under bet offer.
               //break;
               //case 'OT_ODD': //The “Odd” outcome in Odd/Even bet offer.
               //break;
               //case 'OT_EVEN': //The “Even” outcome in Odd/Even bet offer.
               //break;
               //case 'OT_ONE_ONE': //1-1 outcome in Halftime/fulltime bet offer.
               //break;
               //case 'OT_ONE_TWO': //1-2 outcome in Halftime/fulltime bet offer.
               //break;
               //case 'OT_ONE_CROSS': //1-X outcome in Halftime/fulltime bet offer.
               //break;
               //case 'OT_TWO_ONE': //2-1 outcome in Halftime/fulltime bet offer.
               //break;
               //case 'OT_TWO_TWO': //2-2 outcome in Halftime/fulltime bet offer.
               //break;
               //case 'OT_TWO_CROSS': //2-X outcome in Halftime/fulltime bet offer.
               //break;
               //case 'OT_CROSS_ONE': //X-1 outcome in Halftime/fulltime bet offer.
               //break;
               //case 'OT_CROSS_TWO': //X-2 outcome in Halftime/fulltime bet offer.
               //break;
               //case 'OT_CROSS_CROSS': //X-X outcome in Halftime/fulltime bet offer.
               //break;
               //case 'OT_ONE_OR_TWO': //1 or 2 outcome in Double Chance bet offer.
               //break;
               //case 'OT_ONE_OR_CROSS': //1 or X outcome in Double Chance bet offer.
               //break;
               //case 'OT_CROSS_OR_TWO': //X or 2 outcome in Double Chance bet offer.
               //break;
               //case 'OT_YES': //“Yes” outcome in Head To Head and Yes/No bet offer.
               //break;
               //case 'OT_NO': //“No” outcome in Head To Head and Yes/No bet offer.
               //break;
               //case 'OT_OTHER': //“Other results” outcome in Result bet offer.
               //break;
               //case 'OT_UNTYPED': //Outcome does not have type.
               //break;
               //case 'OT_WC_HOME': //Outcome has label Home Win. Applies to WinCast bet offers.
               //break;
               //case 'OT_WC_DRAW': //Outcome has label Draw. Applies to WinCast bet offers.
               //break;
               //case 'OT_WC_AWAY': //Outcome has label Away Win. Applies to WinCast bet offers.
               //break;

               default:
                  console.warn('Unhandled outcome type: ' + outcome.type, outcome);
                  return outcome.label;
            }
         };

         return kambiAPIService;
      }]);
   })(angular.module('widgetCore'));
})();
