/**
 * Service that implements the Kambi Widget API
 * Requests that call the widget API are all deferred so that the we ensure that the API is loaded when trying to call it
 * @author michael@globalmouth.com
 */
(function () {

   'use strict';

   (function ( $app ) {

      /**
       * @ngdoc service
       * @name widgetCore.kambiWidgetService
       * @requires ng.$rootScope
       * @requires ng.$window
       * @requires ng.$q
       * @description
       * Service that implements the Kambi Widget API
       * Requests that call the widget API are all deferred so that the we ensure that the API is loaded when trying to call it
       * @author michael@globalmouth.com
       */
      return $app.service('kambiWidgetService', ['$rootScope', '$window', '$q', function ( $rootScope, $window, $q ) {
         var kambiWidgetService = {}, KWpromise, KWdefer;


         //Setup the Kambi Widget API
         //To ensure that the API is loaded we set up a promise to resolve once the apiReady callback has fired

         if ( $window.KambiWidget ) {
            KWdefer = $q.defer();
            KWpromise = KWdefer.promise;

            $window.KambiWidget.apiReady = function ( api ) {
               kambiWidgetService.api = api;
               KWdefer.resolve(api);
            };
            $window.KambiWidget.receiveResponse = function ( dataObject ) {
               kambiWidgetService.handleResponse(dataObject);
            };
         } else {
            console.warn('Kambi widget api not loaded');
         }


         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#handleResponse
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Handle responses from the Kambi widget API
          * This should only be triggered from the Widget API, so there is nothing to return here
          * @param {Object} response the object has the parameters type and data
          * @param {String} response.type the type of the response
          * @param {*} response.data the response data
          */
         kambiWidgetService.handleResponse = function ( response ) {
            switch ( response.type ) {
               case  kambiWidgetService.api.WIDGET_HEIGHT:
                  // We've received a height response
                  $rootScope.$broadcast('WIDGET:HEIGHT', response.data);
                  break;
               case kambiWidgetService.api.BETSLIP_OUTCOMES:
                  // We've received a response with the outcomes currently in the betslip
                  $rootScope.$broadcast('OUTCOMES:UPDATE', response.data);
                  break;
               case kambiWidgetService.api.WIDGET_ARGS:
                  // We've received a response with the arguments set in the
                  $rootScope.$broadcast('WIDGET:ARGS', response.data);
                  break;
               case kambiWidgetService.api.PAGE_INFO:
                  // Received page info response
                  $rootScope.$broadcast('PAGE:INFO', response.data);
                  break;
               case kambiWidgetService.api.CLIENT_ODDS_FORMAT:
                  // Received odds format response
                  $rootScope.$broadcast('ODDS:FORMAT', response.data);
                  break;
               case kambiWidgetService.api.CLIENT_CONFIG:
                  $rootScope.$broadcast('CLIENT:CONFIG', response.data);
                  break;
               case kambiWidgetService.api.USER_LOGGED_IN:
                  console.debug('User logged in', response.data);
                  $rootScope.$broadcast('USER:LOGGED_IN', response.data);
                  break;
               default:
                  // Unahdled response
                  console.info('Unhandled response type: ' + response.type);
                  console.info(response);
                  break;
            }
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#requestWidgetHeight
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Request the height setting of the widget from the Sportsbook
          * @returns {Promise} Promise
          */
         kambiWidgetService.requestWidgetHeight = function () {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.request(api.WIDGET_HEIGHT);
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#setWidgetHeight
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Uses the Kambi Widget API to set the height of the widgets iframe
          * @param {number} height the height to set the iframe to
          * @returns {Promise} Promise
          */
         kambiWidgetService.setWidgetHeight = function ( height ) {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.set(api.WIDGET_HEIGHT, height);
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#enableWidgetTransition
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Uses the Kambi Widget API to enable or disable CSS3 Transitions, which will animate the widget iframe when it's resized or removed
          * @param   {boolean} enableTransition Set true to enable transition
          * @returns {Promise} Promise
          */
         kambiWidgetService.enableWidgetTransition = function ( enableTransition ) {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               if ( enableTransition ) {
                  api.set(api.WIDGET_ENABLE_TRANSITION);
               } else {
                  api.set(api.WIDGET_DISABLE_TRANSITION);
               }
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#removeWidget
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Removes the widgets iframe from the parent window
          * @returns {Promise} Promise
          */
         kambiWidgetService.removeWidget = function () {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.remove();
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#navigateToLiveEvent
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Navigates the Sportsbook to a live event
          * @param {number} eventId the id of the live event
          * @returns {Promise} Promise
          */
         kambiWidgetService.navigateToLiveEvent = function ( eventId ) {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.navigateClient('#event/live/' + eventId);
            });
            return deferred.promise;

         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#navigateToEvent
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Navigates the Sportsbook to a pre-live event
          * @param {number} eventId the id of the pre-live event
          * @returns {Promise} Promise
          */
         kambiWidgetService.navigateToEvent = function ( eventId ) {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.navigateClient('#event/' + eventId);
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#navigateToGroup
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Navigates te Sportsbook to a specific group
          * @param {number} groupId the id of the group
          * @returns {Promise} Promise
          */
         kambiWidgetService.navigateToGroup = function ( groupId ) {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.navigateClient('#group/' + groupId);
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#navigateToLiveEvents
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Navigates the Sportsbook to a listing of all live events
          * @returns {Promise} Promise
          */
         kambiWidgetService.navigateToLiveEvents = function () {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.navigateClient('#events/live');
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#addOutcomeToBetslip
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Adds one or more outcomes to the betslip
          * @param {number|Array} outcomes An id of an outcome, or an array of outcome ids
          * @param {number|Array} [stakes] A stake or an array of stakes corresponding to the outcomes
          * @param {String} [updateMode=replace] The update mode, 'append' or 'replace'
          * @param {String} [source] Optional campaign code
          * @returns {Promise} Promise
          */
         kambiWidgetService.addOutcomeToBetslip = function ( outcomes, stakes, updateMode, source ) {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               var arrOutcomes = [];
               // Check if the outcomes parameter is an array and add it, otherwise add the the single value as an array
               if ( angular.isArray(outcomes) ) {
                  arrOutcomes = outcomes;
               } else {
                  arrOutcomes.push(outcomes);
               }

               // Setup the data object to be sent to the widget API
               var data = {
                  outcomes: arrOutcomes
               };

               // Check if we got any stakes passed to use, add them to the data object if so
               if ( stakes != null ) {
                  if ( angular.isArray(stakes) ) {
                     data.stakes = stakes;
                  } else {
                     data.stakes = [stakes];
                  }
               }

               // Set the coupon type, defaults to TYPE_SINGLE
               data.couponType = arrOutcomes.length === 1 ? api.BETSLIP_OUTCOMES_ARGS.TYPE_SINGLE :
                  api.BETSLIP_OUTCOMES_ARGS.TYPE_COMBINATION;

               // Set the update mode, defaults to UPDATE_APPEND
               data.updateMode = updateMode !== 'replace' ? api.BETSLIP_OUTCOMES_ARGS.UPDATE_APPEND :
                  api.BETSLIP_OUTCOMES_ARGS.UPDATE_REPLACE;
               if ( source != null ) {
                  data.source = source;
               }

               // Send the data to the widget api
               api.set(api.BETSLIP_OUTCOMES, data);
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#removeOutcomeFromBetslip
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Remove one or more outcomes from the betslip
          * @param {number|Array} outcomes An array of outcome ids or a single outcome id
          * @returns {Promise} Promise
          */
         kambiWidgetService.removeOutcomeFromBetslip = function ( outcomes ) {
            var deferred = $q.defer();

            KWpromise.then(function ( api ) {
               var arrOutcomes = [];
               if ( angular.isArray(outcomes) ) {
                  arrOutcomes = outcomes;
               } else {
                  arrOutcomes.push(outcomes);
               }
               api.set(api.BETSLIP_OUTCOMES_REMOVE, { outcomes: arrOutcomes });
            });

            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#requestBetslipOutcomes
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Request the outcomes that are in the betslip, also sets up a subscription for future updates
          * @returns {Promise} Promise
          */
         kambiWidgetService.requestBetslipOutcomes = function () {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.request(api.BETSLIP_OUTCOMES);
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#requestPageInfo
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Request the page info
          * @returns {Promise} Promise
          */
         kambiWidgetService.requestPageInfo = function () {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.request(api.PAGE_INFO);
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#requestWidgetArgs
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Requests the parameters sent to the widget from the Widget API
          * @returns {Promise} Promise
          */
         kambiWidgetService.requestWidgetArgs = function () {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.request(api.WIDGET_ARGS);
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#requestClientConfig
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Requests the client configuration from the Widget API
          * @returns {Promise} Promise
          */
         kambiWidgetService.requestClientConfig = function () {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.request(api.CLIENT_CONFIG);
            });
            return deferred.promise;
         };

         /**
          * @ngdoc method
          * @name widgetCore.kambiWidgetService#requestOddsFormat
          * @methodOf widgetCore.kambiWidgetService
          * @description
          * Request the odds format from the widget api, also sets up a subscription for future updates
          * @returns {Promise} Promise
          */
         kambiWidgetService.requestOddsFormat = function () {
            var deferred = $q.defer();
            KWpromise.then(function ( api ) {
               api.request(api.CLIENT_ODDS_FORMAT);
            });
            return deferred.promise;
         };

         return kambiWidgetService;
      }]);
   })(angular.module('widgetCore'));
})();
